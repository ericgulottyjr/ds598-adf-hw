{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DS598egulotty"
		},
		"OpenWeatherDataLakeStorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'OpenWeatherDataLakeStorage'"
		},
		"egulottyGitHub_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'egulottyGitHub'"
		},
		"AzureKeyVaultOpenWeather_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://egulottyKeyVault.vault.azure.net/"
		},
		"OpenWeatherAirPollutionREST_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://api.openweathermap.org/"
		},
		"OpenWeatherAirPollutionREST_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "egulotty@bu.edu"
		},
		"OpenWeatherDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://egulottyds598storage.dfs.core.windows.net/"
		},
		"OpenWeatherREST_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://history.openweathermap.org/"
		},
		"OpenWeatherREST_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "egulotty@bu.edu"
		},
		"egulottyGitHub_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "ericgulottyjr"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AirPollutionDFPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AirPollutionDataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AirPollutionOWData": {},
									"SilverLayer": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/AirPollutionDataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HistoricalDFPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "HistoricalDataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"HistoricalOWData": {},
									"SilverLayer": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/HistoricalDataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OWAirPollutionIngest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://egulottykeyvault.vault.azure.net/secrets/egulottyOpenWeather/cf1ff9de917945df8507bc26334c1d22?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "OWPollution",
								"type": "DatasetReference",
								"parameters": {
									"lat": "42.3601",
									"lon": "-71.0539",
									"start": "@div(sub(ticks(addDays(utcNow(), -364)), ticks('1970-01-01T00:00:00Z')), 10000000)",
									"end": "@div(sub(ticks(utcNow()), ticks('1970-01-01T00:00:00Z')), 10000000)",
									"appid": "@activity('Web1').output.value"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "OpenWeatherAirPollutionJSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OWPollution')]",
				"[concat(variables('factoryId'), '/datasets/OpenWeatherAirPollutionJSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OWHistoricalIngest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://egulottykeyvault.vault.azure.net/secrets/egulottyOpenWeather/cf1ff9de917945df8507bc26334c1d22?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0,52)",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET"
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "OWHistorical",
											"type": "DatasetReference",
											"parameters": {
												"lat": "42.3601",
												"lon": "-71.0539",
												"start": {
													"value": "@div(sub(ticks(addDays(utcNow(), sub(0, mul(add(item(), 1), 7)))), ticks('1970-01-01T00:00:00Z')), 10000000)",
													"type": "Expression"
												},
												"end": {
													"value": "@div(sub(ticks(addDays(utcNow(), sub(0, mul(item(), 7)))), ticks('1970-01-01T00:00:00Z')), 10000000)",
													"type": "Expression"
												},
												"appid": {
													"value": "@activity('Web1').output.value",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "OpenWeatherHistoricalJSON",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OWHistorical')]",
				"[concat(variables('factoryId'), '/datasets/OpenWeatherHistoricalJSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OWHistorical')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OpenWeatherREST",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lat": {
						"type": "string",
						"defaultValue": "42.3601"
					},
					"lon": {
						"type": "string",
						"defaultValue": "-71.0539"
					},
					"start": {
						"type": "string"
					},
					"end": {
						"type": "string"
					},
					"appid": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "data/2.5/history/city?lat=@{dataset().lat}&lon=@{dataset().lon}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OpenWeatherREST')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OWPollution')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OpenWeatherAirPollutionREST",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lat": {
						"type": "string",
						"defaultValue": "42.3601"
					},
					"lon": {
						"type": "string",
						"defaultValue": "-71.0539"
					},
					"start": {
						"type": "int"
					},
					"end": {
						"type": "int"
					},
					"appid": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "data/2.5/air_pollution/history?lat=@{dataset().lat}&lon=@{dataset().lon}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OpenWeatherAirPollutionREST')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpenWeatherAirPollutionJSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OpenWeatherDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "air-pollution-historical-data.json",
						"folderPath": "Bronze",
						"fileSystem": "ds598blobstorage"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"coord": {
							"type": "object",
							"properties": {
								"lon": {
									"type": "number"
								},
								"lat": {
									"type": "number"
								}
							}
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"main": {
										"type": "object",
										"properties": {
											"aqi": {
												"type": "integer"
											}
										}
									},
									"components": {
										"type": "object",
										"properties": {
											"co": {
												"type": "number"
											},
											"no": {
												"type": "number"
											},
											"no2": {
												"type": "number"
											},
											"o3": {
												"type": "number"
											},
											"so2": {
												"type": "number"
											},
											"pm2_5": {
												"type": "number"
											},
											"pm10": {
												"type": "number"
											},
											"nh3": {
												"type": "number"
											}
										}
									},
									"dt": {
										"type": "integer"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OpenWeatherDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpenWeatherHistoricalJSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OpenWeatherDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Bronze/Historical",
						"fileSystem": "ds598blobstorage"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						},
						"cod": {
							"type": "string"
						},
						"city_id": {
							"type": "integer"
						},
						"calctime": {
							"type": "number"
						},
						"cnt": {
							"type": "integer"
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"dt": {
										"type": "integer"
									},
									"main": {
										"type": "object",
										"properties": {
											"temp": {
												"type": "number"
											},
											"feels_like": {
												"type": "number"
											},
											"pressure": {
												"type": "integer"
											},
											"humidity": {
												"type": "integer"
											},
											"temp_min": {
												"type": "number"
											},
											"temp_max": {
												"type": "number"
											}
										}
									},
									"wind": {
										"type": "object",
										"properties": {
											"speed": {
												"type": "number"
											},
											"deg": {
												"type": "integer"
											},
											"gust": {
												"type": "number"
											}
										}
									},
									"clouds": {
										"type": "object",
										"properties": {
											"all": {
												"type": "integer"
											}
										}
									},
									"weather": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"main": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"icon": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OpenWeatherDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AirPollutionHistoricalSilver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OpenWeatherDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "silver_airpollution_historical.parquet",
						"folderPath": "silver",
						"fileSystem": "ds598blobstorage"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OpenWeatherDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVaultOpenWeather')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Open Weather key vault",
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVaultOpenWeather_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpenWeatherAirPollutionREST')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('OpenWeatherAirPollutionREST_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('OpenWeatherAirPollutionREST_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultOpenWeather",
							"type": "LinkedServiceReference"
						},
						"secretName": "egulottyOpenWeather"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVaultOpenWeather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpenWeatherDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('OpenWeatherDataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('OpenWeatherDataLakeStorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpenWeatherREST')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "REST API OpenWeather",
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('OpenWeatherREST_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('OpenWeatherREST_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultOpenWeather",
							"type": "LinkedServiceReference"
						},
						"secretName": "egulottyOpenWeather"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVaultOpenWeather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/egulottyGitHub')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('egulottyGitHub_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('egulottyGitHub_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQDgxRjAzNUIxLUQ1NkEtNDFBNi1CRDJGLUMwMzBBQzYwNjQxNF81ZTkxNTQ4NC03M2UxLTQyMzYtYWI4OS0xZGY3NGM1YjQ5ZWUiDQp9"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AirPollutionDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OpenWeatherAirPollutionJSON",
								"type": "DatasetReference"
							},
							"name": "AirPollutionOWData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AirPollutionHistoricalSilver",
								"type": "DatasetReference"
							},
							"name": "SilverLayer"
						}
					],
					"transformations": [
						{
							"name": "createTimeLoc"
						},
						{
							"name": "filterInvalidRows"
						},
						{
							"name": "deriveColumns"
						},
						{
							"name": "RenameAndDrop"
						},
						{
							"name": "Flatten"
						}
					],
					"scriptLines": [
						"source(output(",
						"          coord as (lon as double, lat as double),",
						"          list as (main as (aqi as integer), components as (co as double, no as double, no2 as double, o3 as double, so2 as double, pm2_5 as double, pm10 as double, nh3 as double), dt as integer)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> AirPollutionOWData",
						"Flatten derive(corrected_timestamp = iif(length(toString({dt})) == 10, {dt}, toInteger(null())),",
						"          location = 'Boston') ~> createTimeLoc",
						"createTimeLoc filter(!isNull(aqi) && trim(toString(aqi)) != '' &&",
						"!isNull({dt}) && trim(toString({dt})) != '' &&",
						"!isNull(corrected_timestamp) && trim(toString(corrected_timestamp)) != '') ~> filterInvalidRows",
						"filterInvalidRows derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, toString(corrected_timestamp)),",
						"          lon = -71.0589,",
						"          lat = 42.3601) ~> deriveColumns",
						"deriveColumns select(mapColumn(",
						"          lon,",
						"          lat,",
						"          aqi,",
						"          co,",
						"          no,",
						"          no2,",
						"          o3,",
						"          so2,",
						"          pm2_5,",
						"          pm10,",
						"          nh3,",
						"          corrected_timestamp,",
						"          location,",
						"          id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameAndDrop",
						"AirPollutionOWData foldDown(unroll(list, list),",
						"     mapColumn(",
						"          lon = coord.lon,",
						"          lat = coord.lat,",
						"          aqi = list.main.aqi,",
						"          co = list.components.co,",
						"          no = list.components.no,",
						"          no2 = list.components.no2,",
						"          o3 = list.components.o3,",
						"          so2 = list.components.so2,",
						"          pm2_5 = list.components.pm2_5,",
						"          pm10 = list.components.pm10,",
						"          nh3 = list.components.nh3,",
						"          dt = list.dt",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> Flatten",
						"RenameAndDrop sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SilverLayer"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OpenWeatherAirPollutionJSON')]",
				"[concat(variables('factoryId'), '/datasets/AirPollutionHistoricalSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HistoricalDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OpenWeatherHistoricalJSON",
								"type": "DatasetReference"
							},
							"name": "HistoricalOWData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "WeatherHistoricalSilver",
								"type": "DatasetReference"
							},
							"name": "SilverLayer"
						}
					],
					"transformations": [
						{
							"name": "createTimeLoc"
						},
						{
							"name": "filterInvalidRows"
						},
						{
							"name": "deriveColumns"
						},
						{
							"name": "RenameAndDrop"
						},
						{
							"name": "UnrollFlatten"
						}
					],
					"scriptLines": [
						"source(output(",
						"          message as string,",
						"          cod as string,",
						"          city_id as integer,",
						"          calctime as double,",
						"          cnt as integer,",
						"          list as (dt as integer, main as (temp as double, feels_like as double, pressure as integer, humidity as integer, temp_min as double, temp_max as double), wind as (speed as double, deg as integer, gust as double), clouds as (all as integer), weather as (id as integer, main as string, description as string, icon as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> HistoricalOWData",
						"UnrollFlatten derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, timestamp, toInteger(null())),",
						"          location = 'Boston') ~> createTimeLoc",
						"createTimeLoc filter(!isNull(temp) && trim(toString(temp)) != '' &&",
						"!isNull(humidity) && trim(toString(humidity)) != '' &&",
						"!isNull(`timestamp`) && trim(toString(`timestamp`)) != '' &&",
						"!isNull(corrected_timestamp) && trim(toString(corrected_timestamp)) != '') ~> filterInvalidRows",
						"filterInvalidRows derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, toString(corrected_timestamp)),",
						"          temp_C = round(temp - 273.15, 2),",
						"          temp_min_C = round(temp_min - 273.15, 2),",
						"          temp_max_C = round(temp_max - 273.15, 2),",
						"          feels_like_C = round(feels_like - 273.15, 2),",
						"          temp_F = round(((temp - 273.15) * 9/5) + 32, 2),",
						"          temp_min_F = round(((temp_min - 273.15) * 9/5) + 32, 2),",
						"          temp_max_F = round(((temp_max - 273.15) * 9/5) + 32, 2),",
						"          feels_like_F = round(((feels_like - 273.15) * 9/5) + 32, 2),",
						"          lon = -71.0589,",
						"          lat = 42.3601,",
						"          weather_id_value = toInteger(weather_id),",
						"          weather_main_value = split(weather_main, ': ')[1],",
						"          weather_description_value = split(weather_description, ': ')[1],",
						"          weather_icon_value = split(weather_icon, ': ')[1]) ~> deriveColumns",
						"deriveColumns select(mapColumn(",
						"          clouds_all,",
						"          temp_K = temp,",
						"          feels_like_K = feels_like,",
						"          pressure,",
						"          humidity,",
						"          temp_min_K = temp_min,",
						"          temp_max_K = temp_max,",
						"          wind_speed,",
						"          wind_deg,",
						"          wind_gust,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          id,",
						"          temp_C,",
						"          temp_min_C,",
						"          temp_max_C,",
						"          feels_like_C,",
						"          temp_F,",
						"          temp_min_F,",
						"          temp_max_F,",
						"          feels_like_F,",
						"          lon,",
						"          lat,",
						"          weather_id_value,",
						"          weather_main_value,",
						"          weather_description_value,",
						"          weather_icon_value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameAndDrop",
						"HistoricalOWData foldDown(unrollMultiple(list,list.weather),",
						"     mapColumn(",
						"          message,",
						"          cod,",
						"          city_id,",
						"          calctime,",
						"          cnt,",
						"          timestamp = list.dt,",
						"          clouds_all = list.clouds.all,",
						"          temp = list.main.temp,",
						"          feels_like = list.main.feels_like,",
						"          pressure = list.main.pressure,",
						"          humidity = list.main.humidity,",
						"          temp_min = list.main.temp_min,",
						"          temp_max = list.main.temp_max,",
						"          wind_speed = list.wind.speed,",
						"          wind_deg = list.wind.deg,",
						"          wind_gust = list.wind.gust,",
						"          weather_id = list.weather.id,",
						"          weather_main = list.weather.main,",
						"          weather_description = list.weather.description,",
						"          weather_icon = list.weather.icon",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> UnrollFlatten",
						"RenameAndDrop sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          clouds_all as integer,",
						"          temp_K as double,",
						"          feels_like_K as double,",
						"          pressure as integer,",
						"          humidity as integer,",
						"          temp_min_K as double,",
						"          temp_max_K as double,",
						"          wind_speed as double,",
						"          wind_deg as integer,",
						"          wind_gust as double,",
						"          corrected_timestamp as integer,",
						"          location as string,",
						"          date_time as timestamp,",
						"          id as string,",
						"          temp_C as double,",
						"          temp_min_C as double,",
						"          temp_max_C as double,",
						"          feels_like_C as double,",
						"          temp_F as double,",
						"          temp_min_F as double,",
						"          temp_max_F as double,",
						"          feels_like_F as double,",
						"          lon as double,",
						"          lat as double,",
						"          weather_id_value as integer,",
						"          weather_main_value as string,",
						"          weather_description_value as string,",
						"          weather_icon_value as string",
						"     ),",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SilverLayer"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OpenWeatherHistoricalJSON')]",
				"[concat(variables('factoryId'), '/datasets/WeatherHistoricalSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherHistoricalSilver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OpenWeatherDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "silver_weather_historical.parquet",
						"folderPath": "silver",
						"fileSystem": "ds598blobstorage"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "clouds_all",
						"type": "INT32"
					},
					{
						"name": "temp_K",
						"type": "DOUBLE"
					},
					{
						"name": "feels_like_K",
						"type": "DOUBLE"
					},
					{
						"name": "pressure",
						"type": "INT32"
					},
					{
						"name": "humidity",
						"type": "INT32"
					},
					{
						"name": "temp_min_K",
						"type": "DOUBLE"
					},
					{
						"name": "temp_max_K",
						"type": "DOUBLE"
					},
					{
						"name": "wind_speed",
						"type": "DOUBLE"
					},
					{
						"name": "wind_deg",
						"type": "INT32"
					},
					{
						"name": "wind_gust",
						"type": "DOUBLE"
					},
					{
						"name": "corrected_timestamp",
						"type": "INT32"
					},
					{
						"name": "location",
						"type": "UTF8"
					},
					{
						"name": "date_time",
						"type": "INT96"
					},
					{
						"name": "id",
						"type": "UTF8"
					},
					{
						"name": "temp_C",
						"type": "DOUBLE"
					},
					{
						"name": "temp_min_C",
						"type": "DOUBLE"
					},
					{
						"name": "temp_max_C",
						"type": "DOUBLE"
					},
					{
						"name": "feels_like_C",
						"type": "DOUBLE"
					},
					{
						"name": "temp_F",
						"type": "DOUBLE"
					},
					{
						"name": "temp_min_F",
						"type": "DOUBLE"
					},
					{
						"name": "temp_max_F",
						"type": "DOUBLE"
					},
					{
						"name": "feels_like_F",
						"type": "DOUBLE"
					},
					{
						"name": "lon",
						"type": "DOUBLE"
					},
					{
						"name": "lat",
						"type": "DOUBLE"
					},
					{
						"name": "weather_id_value",
						"type": "INT32"
					},
					{
						"name": "weather_main_value",
						"type": "UTF8"
					},
					{
						"name": "weather_description_value",
						"type": "UTF8"
					},
					{
						"name": "weather_icon_value",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OpenWeatherDataLakeStorage')]"
			]
		}
	]
}