{
	"name": "HistoricalDataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "OpenWeatherHistoricalJSON",
						"type": "DatasetReference"
					},
					"name": "HistoricalOWData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "WeatherHistoricalSilver",
						"type": "DatasetReference"
					},
					"name": "SilverLayer"
				}
			],
			"transformations": [
				{
					"name": "createTimeLoc"
				},
				{
					"name": "filterInvalidRows"
				},
				{
					"name": "deriveColumns"
				},
				{
					"name": "RenameAndDrop"
				},
				{
					"name": "UnrollFlatten"
				}
			],
			"scriptLines": [
				"source(output(",
				"          message as string,",
				"          cod as string,",
				"          city_id as integer,",
				"          calctime as double,",
				"          cnt as integer,",
				"          list as (dt as integer, main as (temp as double, feels_like as double, pressure as integer, humidity as integer, temp_min as double, temp_max as double), wind as (speed as double, deg as integer, gust as double), clouds as (all as integer), weather as (id as integer, main as string, description as string, icon as string)[])[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> HistoricalOWData",
				"UnrollFlatten derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, timestamp, toInteger(null())),",
				"          location = 'Boston') ~> createTimeLoc",
				"createTimeLoc filter(!isNull(temp) && trim(toString(temp)) != '' &&",
				"!isNull(humidity) && trim(toString(humidity)) != '' &&",
				"!isNull(`timestamp`) && trim(toString(`timestamp`)) != '' &&",
				"!isNull(corrected_timestamp) && trim(toString(corrected_timestamp)) != '') ~> filterInvalidRows",
				"filterInvalidRows derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
				"          id = concat(location, toString(corrected_timestamp)),",
				"          temp_C = round(temp - 273.15, 2),",
				"          temp_min_C = round(temp_min - 273.15, 2),",
				"          temp_max_C = round(temp_max - 273.15, 2),",
				"          feels_like_C = round(feels_like - 273.15, 2),",
				"          temp_F = round(((temp - 273.15) * 9/5) + 32, 2),",
				"          temp_min_F = round(((temp_min - 273.15) * 9/5) + 32, 2),",
				"          temp_max_F = round(((temp_max - 273.15) * 9/5) + 32, 2),",
				"          feels_like_F = round(((feels_like - 273.15) * 9/5) + 32, 2),",
				"          lon = -71.0589,",
				"          lat = 42.3601,",
				"          weather_id_value = toInteger(weather_id),",
				"          weather_main_value = split(weather_main, ': ')[1],",
				"          weather_description_value = split(weather_description, ': ')[1],",
				"          weather_icon_value = split(weather_icon, ': ')[1]) ~> deriveColumns",
				"deriveColumns select(mapColumn(",
				"          clouds_all,",
				"          temp_K = temp,",
				"          feels_like_K = feels_like,",
				"          pressure,",
				"          humidity,",
				"          temp_min_K = temp_min,",
				"          temp_max_K = temp_max,",
				"          wind_speed,",
				"          wind_deg,",
				"          wind_gust,",
				"          corrected_timestamp,",
				"          location,",
				"          date_time,",
				"          id,",
				"          temp_C,",
				"          temp_min_C,",
				"          temp_max_C,",
				"          feels_like_C,",
				"          temp_F,",
				"          temp_min_F,",
				"          temp_max_F,",
				"          feels_like_F,",
				"          lon,",
				"          lat,",
				"          weather_id_value,",
				"          weather_main_value,",
				"          weather_description_value,",
				"          weather_icon_value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameAndDrop",
				"HistoricalOWData foldDown(unrollMultiple(list,list.weather),",
				"     mapColumn(",
				"          message,",
				"          cod,",
				"          city_id,",
				"          calctime,",
				"          cnt,",
				"          timestamp = list.dt,",
				"          clouds_all = list.clouds.all,",
				"          temp = list.main.temp,",
				"          feels_like = list.main.feels_like,",
				"          pressure = list.main.pressure,",
				"          humidity = list.main.humidity,",
				"          temp_min = list.main.temp_min,",
				"          temp_max = list.main.temp_max,",
				"          wind_speed = list.wind.speed,",
				"          wind_deg = list.wind.deg,",
				"          wind_gust = list.wind.gust,",
				"          weather_id = list.weather.id,",
				"          weather_main = list.weather.main,",
				"          weather_description = list.weather.description,",
				"          weather_icon = list.weather.icon",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> UnrollFlatten",
				"RenameAndDrop sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          clouds_all as integer,",
				"          temp_K as double,",
				"          feels_like_K as double,",
				"          pressure as integer,",
				"          humidity as integer,",
				"          temp_min_K as double,",
				"          temp_max_K as double,",
				"          wind_speed as double,",
				"          wind_deg as integer,",
				"          wind_gust as double,",
				"          corrected_timestamp as integer,",
				"          location as string,",
				"          date_time as timestamp,",
				"          id as string,",
				"          temp_C as double,",
				"          temp_min_C as double,",
				"          temp_max_C as double,",
				"          feels_like_C as double,",
				"          temp_F as double,",
				"          temp_min_F as double,",
				"          temp_max_F as double,",
				"          feels_like_F as double,",
				"          lon as double,",
				"          lat as double,",
				"          weather_id_value as integer,",
				"          weather_main_value as string,",
				"          weather_description_value as string,",
				"          weather_icon_value as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SilverLayer"
			]
		}
	}
}